---
- name: Set prefix to strip
  ansible.builtin.set_fact:
    dotfiles_prefix: "{{ dotfiles_start_with_dot | ternary('', '.') }}"

- name: Ensure dotfiles repository is cloned locally.
  ansible.builtin.git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    version: "{{ dotfiles_repo_version }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
    force: "{{ dotfiles_force_clone }}"
    recursive: "{{ dotfiles_recursive }}"
  become: false

- name: Ensure all configured dotfiles are links.
  ansible.builtin.command: "ls -F {{ dotfiles_home }}/{{ dotfiles_prefix }}{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: false
  changed_when: false
  with_items: "{{ dotfiles_files }}"

- name: Remove existing dotfiles file if a replacement is being linked.
  ansible.builtin.file:
    path: "{{ dotfiles_home }}/{{ dotfiles_prefix }}{{ dotfiles_files[item.0] }}"
    state: absent
  when: "'@' not in item.1.stdout"
  with_indexed_items: "{{ existing_dotfile_info.results }}"
  loop_control:
    label: "{{ dotfiles_files[item.0] }}"

- name: Ensure linked parent directory exists
  ansible.builtin.file:
    mode: "0755"
    path: "{{ dotfiles_home }}/{{ dotfiles_prefix }}{{ item | dirname }}"
    state: directory
  when: item | dirname | length > 0
  with_items: "{{ dotfiles_files }}"


- name: Link dotfiles into home folder.
  ansible.builtin.file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ dotfiles_prefix }}{{ item }}"
    state: link
    mode: "u=rwX,g=rX,o=rX"
  become: false
  with_items: "{{ dotfiles_files }}"
